// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  username  String
  password  String
  identify  String
  rolId     Int
  rol       Roles   @relation(fields: [rolId], references: [id])
  status    Boolean
}

model Roles {
  id   Int    @id @default(autoincrement())
  rol  String
  User User[]
}

model Students {
  id             Int              @id @default(autoincrement())
  firstName      String
  lastName       String
  identify       String
  age            Int
  gradeId        Int
  address        String
  status         Boolean
  grade          Grades           @relation(fields: [gradeId], references: [id])
  Parents        StudentParent[]
  Registration   Registration[]
  MonthlyPayment MonthlyPayment[]
  Payments       Payments[]
  Notes          Notes[]
}

model Parents {
  id        Int             @id @default(autoincrement())
  firstName String
  lastName  String
  age       Int
  identify  String
  phone     String
  address   String
  status    Boolean
  Students  StudentParent[]
}

model StudentParent {
  id        Int      @id @default(autoincrement())
  studentId Int
  student   Students @relation(fields: [studentId], references: [id])
  parentId  Int
  parent    Parents  @relation(fields: [parentId], references: [id])
}

model Grades {
  id           Int            @id @default(autoincrement())
  grade        String
  Students     Students[]
  Registration Registration[]
  Subjects     Subjects[]
}

model Subjects {
  id         Int          @id @default(autoincrement())
  subject    String
  gradeId    Int
  Grades     Grades       @relation(fields: [gradeId], references: [id])
  Activities Activities[]
}

model Activities {
  id           Int       @id @default(autoincrement())
  activity     String
  dateActivity DateTime
  subjectId    Int
  subjects     Subjects  @relation(fields: [subjectId], references: [id])
  Notes        Notes[]
}

model Notes {
  id          Int        @id @default(autoincrement())
  activityId Int
  Activities  Activities @relation(fields: [activityId], references: [id])
  studentId   Int
  student     Students   @relation(fields: [studentId], references: [id])
  note        Int
}

model MethodPayment {
  id            Int             @id @default(autoincrement())
  type          String
  bank          String
  countNumber   String
  identify      String
  email         String
  phone         String
  owner         String
  Payments      Payments[]
  PaymentDetail PaymentDetail[]
}

model Payments {
  id              Int            @id @default(autoincrement())
  amount          Int
  studentId       Int
  student         Students       @relation(fields: [studentId], references: [id])
  currency        String
  datePay         DateTime
  namePayer       String
  lastNamePayer   String
  identifyPayer   String
  phonePayer      String
  Registration    Registration[]
  paymentMethodId Int
  methodPayment   MethodPayment  @relation(fields: [paymentMethodId], references: [id])
}

model Registration {
  id        Int      @id @default(autoincrement())
  studentId Int
  student   Students @relation(fields: [studentId], references: [id])
  startDate DateTime
  period    String
  Grades    Grades   @relation(fields: [gradesId], references: [id])
  gradesId  Int
  paymentId Int
  payments  Payments @relation(fields: [paymentId], references: [id])
}

model MonthlyFee {
  id       Int              @id @default(autoincrement())
  month    Int // Mes (1 = Enero, 2 = Febrero, ..., 12 = Diciembre)
  year     Int // Año
  amount   Int // Monto de la mensualidad
  students MonthlyPayment[]
}

model MonthlyPayment {
  id           Int             @id @default(autoincrement())
  studentId    Int
  student      Students        @relation(fields: [studentId], references: [id])
  monthlyFeeId Int
  monthlyFee   MonthlyFee      @relation(fields: [monthlyFeeId], references: [id])
  status       Boolean         @default(false) // Se marca como true si se pagó totalmente
  payments     PaymentDetail[]
}

model PaymentDetail {
  id               Int            @id @default(autoincrement())
  monthlyPaymentId Int
  monthlyPayment   MonthlyPayment @relation(fields: [monthlyPaymentId], references: [id])
  paymentMethodId  Int
  methodPayment    MethodPayment  @relation(fields: [paymentMethodId], references: [id])
  amountPaid       Int
  datePay          DateTime
  namePayer        String
  lastNamePayer    String
  identifyPayer    String
  phonePayer       String
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  username  String
  password  String
  identify  String
  rolId     Int
  rol       Roles   @relation(fields: [rolId], references: [id])
  status    Boolean
}

model Roles {
  id   Int    @id @default(autoincrement())
  rol  String
  User User[]
}

model Students {
  id           Int             @id @default(autoincrement())
  firstName    String
  lastName     String
  identify     String
  age          Int
  gradeId      Int
  grade        Grades          @relation(fields: [gradeId], references: [id])
  address      String
  Parents      StudentParent[]
  status       Boolean
  Registration Registration[]
  Activities   Activities[]
}

model Parents {
  id        Int             @id @default(autoincrement())
  firstName String
  lastName  String
  age       Int
  identify  String
  phone     String
  address   String
  status    Boolean
  Students  StudentParent[]
}

model StudentParent {
  id        Int      @id @default(autoincrement())
  studentId Int
  student   Students @relation(fields: [studentId], references: [id])
  parentId  Int
  parent    Parents  @relation(fields: [parentId], references: [id])
}

model Grades {
  id           Int            @id @default(autoincrement())
  grade        String
  Students     Students[]
  Registration Registration[]
}

model Subjects {
  id         Int          @id @default(autoincrement())
  subject    String
  Activities Activities[]
}

model Activities {
  id           Int      @id @default(autoincrement())
  activity     String
  dateActivity DateTime
  studentId    Int
  student      Students @relation(fields: [studentId], references: [id])
  subjectId    Int
  subjects     Subjects @relation(fields: [subjectId], references: [id])
  grade        Int
}

model TypePayment {
  id          Int             @id @default(autoincrement())
  typePayment String
  Payment     MethodPayment[]
}

model MethodPayment {
  id          Int         @id @default(autoincrement())
  typeId      Int
  type        TypePayment @relation(fields: [typeId], references: [id])
  bank        String
  countNumber String
  identify    String
  email       String
  phone       String
  owner       String
  Payments    Payments[]
}

model Payments {
  id              Int            @id @default(autoincrement())
  amount          Int
  currency        String
  datePay         DateTime
  namePayer       String
  lastNamePayer   String
  identifyPayer   String
  phonePayer      String
  Registration    Registration[]
  paymentMethodId Int
  methodPayment   MethodPayment  @relation(fields: [paymentMethodId], references: [id])
}

model Registration {
  id        Int      @id @default(autoincrement())
  studentId Int
  student   Students @relation(fields: [studentId], references: [id])
  startDate DateTime
  period    String
  Grades    Grades   @relation(fields: [gradesId], references: [id])
  gradesId  Int
  paymentId Int
  payments  Payments @relation(fields: [paymentId], references: [id])
}

